#include "pch.h"
#include "Common.h"

using namespace std;

void write_parser_code(map<int, map<string, int>>& GOTO, map<int, map<string, pair<string, int>>>& action,
	const unordered_set<string>& terminal, const unordered_set<string>& noter, const ProducerVecStr pro, const string& definition, const string& code)
{
	int termNum = terminal.size();
	int noterNum = noter.size();
	int statesNum = action.size();
	string opt, type;

	ofstream out;

	if (_mkdir("yacc_out") == 0)
	{
		printf("Directory 'yacc_out' was successfully created\n");
	}
	else
		printf("Directory 'yacc_out' already exists\n");

	out.open("yacc_out/yacc.cpp", ios::out);

	out << definition;

	out << "\n// The following are generated by Yacc\n" << endl;

	out << "static map<string, int> GOTO[" << statesNum << "] {\n";
	for (size_t i = 0; i < statesNum; i++)
	{
		int ct = 0;
		for (auto s : noter) {
			if (GOTO[i][s] != -1) ct++;
		}
		if (ct == 0) {
			opt += "\t{},\n";
			continue;
		}
		opt += "\t{";
		for (auto s : noter) {
			int w = GOTO[i][s];
			if (w != -1) {
				opt += "{\"" + s + "\", " + to_string(w) + "}, ";
			}
		}
		opt.pop_back(); opt.pop_back();
		opt += "},\n";
	}
	opt.pop_back(); opt.pop_back();
	opt += "\n};\n\n";
	out << opt;
	opt.clear();

	out << "static map<string, pair<unsigned, int>> ACTION[" << statesNum << "] {\n";
	for (size_t i = 0; i < statesNum; i++)
	{
		opt += "\t{";
		for (auto s : terminal) {
			auto r = action[i][s];
			opt += "{\"" + s + "\", {";
			type = r.first;
			if (type == "s") {
				opt += "0, ";
			}
			else if (type == "r") {
				opt += "1, ";
			}
			else if (type == "acc") {
				opt += "2, ";
			}
			else opt += "3, ";
			opt += to_string(r.second) + "}}, ";
		}
		opt.pop_back(); opt.pop_back();
		opt += "},\n";
	}
	opt.pop_back(); opt.pop_back();
	opt += "\n};\n\n";
	out << opt;
	opt.clear();

	out << "static pair<string, vector<string>> pvs[" << pro.size() << "] {\n";
	for (auto p : pro) {
		opt += "\t{\"" + p.first + "\", {";
		for (auto r : p.second) {
			opt += "\"" + r + "\", ";
		}
		opt.pop_back(); opt.pop_back();
		opt += "}},\n";
	}
	opt.pop_back(); opt.pop_back();
	opt += "\n};\n\n";
	out << opt;
	opt.clear();

	out << "\n// The following are from the yacc file" << endl;

	out << code;

	out.close();
}